{"version":3,"file":"worker-WORDboYd.js","names":["cache: Record<string, string[]>","lines: string[]","cache: Record<string, number>","searchedNodeIdResult: string | null","filteredLinkIds: string[]"],"sources":["../../src/worker.ts"],"sourcesContent":["interface GraphNode {\n\tid: string;\n\tname: string;\n\ttags: string[];\n\tcolor: string;\n\tincomingCount: number;\n\toutgoingCount: number;\n}\n\ninterface GraphLink {\n\tsource: string;\n\ttarget: string;\n}\n\ninterface FilterMessage {\n\ttype: \"filter\";\n\tnodes: GraphNode[];\n\tlinks: GraphLink[];\n\tsearchTerm: string;\n\tselectedTags: string[];\n\ttagIndexCache: Record<string, string[]>;\n}\n\ninterface TextCacheMessage {\n\ttype: \"textCache\";\n\tnodes: GraphNode[];\n}\n\ninterface NodeSizeMessage {\n\ttype: \"nodeSize\";\n\tnodes: GraphNode[];\n\tnodeSizeMultiplier: number;\n}\n\ninterface FilterResult {\n\tfilteredNodeIds: string[];\n\tfilteredLinkIds: string[];\n\tsearchedNodeId: string | null;\n}\n\ninterface TextCacheResult {\n\ttextLineCache: Record<string, string[]>;\n}\n\ninterface NodeSizeResult {\n\tnodeSizeCache: Record<string, number>;\n}\n\nfunction buildTextLineCache(nodes: GraphNode[]): Record<string, string[]> {\n\tconst cache: Record<string, string[]> = {};\n\tnodes.forEach(node => {\n\t\tconst charLimit = 25;\n\t\tconst lines: string[] = [];\n\t\tlet currentLine = \"\";\n\t\tfor (const char of node.name) {\n\t\t\tcurrentLine += char;\n\t\t\tif (currentLine.length >= charLimit) {\n\t\t\t\tlines.push(currentLine);\n\t\t\t\tcurrentLine = \"\";\n\t\t\t}\n\t\t}\n\t\tif (currentLine) lines.push(currentLine);\n\t\tcache[node.id] = lines;\n\t});\n\treturn cache;\n}\n\nfunction buildNodeSizeCache(\n\tnodes: GraphNode[],\n\tnodeSizeMultiplier: number\n): Record<string, number> {\n\tconst cache: Record<string, number> = {};\n\tnodes.forEach(node => {\n\t\tconst connectionCount = node.incomingCount + node.outgoingCount || 1;\n\t\tcache[node.id] = Math.sqrt(connectionCount) * nodeSizeMultiplier;\n\t});\n\treturn cache;\n}\n\nfunction processFilter(\n\tnodes: GraphNode[],\n\tlinks: GraphLink[],\n\tsearchTerm: string,\n\tselectedTags: string[],\n\ttagIndexCache: Record<string, string[]>\n): FilterResult {\n\tconst sanitizedSearchTerm = (searchTerm || \"\").trim();\n\tconst sanitizedTags = (selectedTags || []).filter(\n\t\ttag => typeof tag === \"string\" && tag in tagIndexCache\n\t);\n\n\tlet resultNodeIds = new Set<string>();\n\tlet searchedNodeIdResult: string | null = null;\n\n\tif (sanitizedSearchTerm !== \"\") {\n\t\tconst matchedNode = nodes.find(\n\t\t\tnode => node.name === sanitizedSearchTerm\n\t\t);\n\n\t\tif (matchedNode) {\n\t\t\tresultNodeIds.add(matchedNode.id);\n\t\t\tsearchedNodeIdResult = matchedNode.id;\n\n\t\t\tconst linkMap = new Map<string, GraphLink[]>();\n\t\t\tlinks.forEach(link => {\n\t\t\t\tif (!linkMap.has(link.source)) linkMap.set(link.source, []);\n\t\t\t\tif (!linkMap.has(link.target)) linkMap.set(link.target, []);\n\t\t\t\tlinkMap.get(link.source)!.push(link);\n\t\t\t\tlinkMap.get(link.target)!.push(link);\n\t\t\t});\n\n\t\t\tlinkMap.get(matchedNode.id)?.forEach(link => {\n\t\t\t\tresultNodeIds.add(\n\t\t\t\t\tlink.source === matchedNode.id ? link.target : link.source\n\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tfilteredNodeIds: [],\n\t\t\t\tfilteredLinkIds: [],\n\t\t\t\tsearchedNodeId: null,\n\t\t\t};\n\t\t}\n\t}\n\n\tif (sanitizedTags.length > 0) {\n\t\tconst tagFilteredNodeIds = new Set<string>();\n\t\tsanitizedTags.forEach(tag => {\n\t\t\tconst nodeIds = tagIndexCache[tag] || [];\n\t\t\tnodeIds.forEach(nodeId => {\n\t\t\t\ttagFilteredNodeIds.add(nodeId);\n\t\t\t});\n\t\t});\n\n\t\tif (sanitizedSearchTerm !== \"\") {\n\t\t\tresultNodeIds = new Set(\n\t\t\t\tArray.from(resultNodeIds).filter(\n\t\t\t\t\tid =>\n\t\t\t\t\t\ttagFilteredNodeIds.has(id) ||\n\t\t\t\t\t\tid === searchedNodeIdResult\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tresultNodeIds = tagFilteredNodeIds;\n\t\t}\n\t}\n\n\tconst resultNodeIdSet = resultNodeIds;\n\tconst filteredNodeIds = Array.from(resultNodeIdSet);\n\tconst filteredLinkIds: string[] = [];\n\n\tlinks.forEach(link => {\n\t\tif (\n\t\t\tresultNodeIdSet.has(link.source) &&\n\t\t\tresultNodeIdSet.has(link.target)\n\t\t) {\n\t\t\tfilteredLinkIds.push(`${link.source}|${link.target}`);\n\t\t}\n\t});\n\n\treturn {\n\t\tfilteredNodeIds,\n\t\tfilteredLinkIds,\n\t\tsearchedNodeId: searchedNodeIdResult,\n\t};\n}\n\nself.onmessage = (\n\tevent: MessageEvent<FilterMessage | TextCacheMessage | NodeSizeMessage>\n) => {\n\tconst message = event.data;\n\n\tif (message.type === \"filter\") {\n\t\tconst filterMessage = message as FilterMessage;\n\t\tconst result = processFilter(\n\t\t\tfilterMessage.nodes,\n\t\t\tfilterMessage.links,\n\t\t\tfilterMessage.searchTerm,\n\t\t\tfilterMessage.selectedTags,\n\t\t\tfilterMessage.tagIndexCache\n\t\t);\n\t\tself.postMessage(result);\n\t} else if (message.type === \"textCache\") {\n\t\tconst textMessage = message as TextCacheMessage;\n\t\tconst textLineCache = buildTextLineCache(textMessage.nodes);\n\t\tself.postMessage({ textLineCache } as TextCacheResult);\n\t} else if (message.type === \"nodeSize\") {\n\t\tconst nodeSizeMessage = message as NodeSizeMessage;\n\t\tconst nodeSizeCache = buildNodeSizeCache(\n\t\t\tnodeSizeMessage.nodes,\n\t\t\tnodeSizeMessage.nodeSizeMultiplier\n\t\t);\n\t\tself.postMessage({ nodeSizeCache } as NodeSizeResult);\n\t}\n};\n"],"mappings":"YAgDA,SAAS,EAAmB,EAA8C,CACzE,IAAMA,EAAkC,EAAE,CAe1C,OAdA,EAAM,QAAQ,GAAQ,CACrB,IACMC,EAAkB,EAAE,CACtB,EAAc,GAClB,IAAK,IAAM,KAAQ,EAAK,KACvB,GAAe,EACX,EAAY,QAAU,KACzB,EAAM,KAAK,EAAY,CACvB,EAAc,IAGZ,GAAa,EAAM,KAAK,EAAY,CACxC,EAAM,EAAK,IAAM,GAChB,CACK,EAGR,SAAS,EACR,EACA,EACyB,CACzB,IAAMC,EAAgC,EAAE,CAKxC,OAJA,EAAM,QAAQ,GAAQ,CACrB,IAAM,EAAkB,EAAK,cAAgB,EAAK,eAAiB,EACnE,EAAM,EAAK,IAAM,KAAK,KAAK,EAAgB,CAAG,GAC7C,CACK,EAGR,SAAS,EACR,EACA,EACA,EACA,EACA,EACe,CACf,IAAM,GAAuB,GAAc,IAAI,MAAM,CAC/C,GAAiB,GAAgB,EAAE,EAAE,OAC1C,GAAO,OAAO,GAAQ,UAAY,KAAO,EACzC,CAEG,EAAgB,IAAI,IACpBC,EAAsC,KAE1C,GAAI,IAAwB,GAAI,CAC/B,IAAM,EAAc,EAAM,KACzB,GAAQ,EAAK,OAAS,EACtB,CAED,GAAI,EAAa,CAChB,EAAc,IAAI,EAAY,GAAG,CACjC,EAAuB,EAAY,GAEnC,IAAM,EAAU,IAAI,IACpB,EAAM,QAAQ,GAAQ,CAChB,EAAQ,IAAI,EAAK,OAAO,EAAE,EAAQ,IAAI,EAAK,OAAQ,EAAE,CAAC,CACtD,EAAQ,IAAI,EAAK,OAAO,EAAE,EAAQ,IAAI,EAAK,OAAQ,EAAE,CAAC,CAC3D,EAAQ,IAAI,EAAK,OAAO,CAAE,KAAK,EAAK,CACpC,EAAQ,IAAI,EAAK,OAAO,CAAE,KAAK,EAAK,EACnC,CAEF,EAAQ,IAAI,EAAY,GAAG,EAAE,QAAQ,GAAQ,CAC5C,EAAc,IACb,EAAK,SAAW,EAAY,GAAK,EAAK,OAAS,EAAK,OACpD,EACA,MAEF,MAAO,CACN,gBAAiB,EAAE,CACnB,gBAAiB,EAAE,CACnB,eAAgB,KAChB,CAIH,GAAI,EAAc,OAAS,EAAG,CAC7B,IAAM,EAAqB,IAAI,IAC/B,EAAc,QAAQ,GAAO,EACZ,EAAc,IAAQ,EAAE,EAChC,QAAQ,GAAU,CACzB,EAAmB,IAAI,EAAO,EAC7B,EACD,CAEF,AACC,EADG,IAAwB,GASX,EARA,IAAI,IACnB,MAAM,KAAK,EAAc,CAAC,OACzB,GACC,EAAmB,IAAI,EAAG,EAC1B,IAAO,EACR,CACD,CAMH,IAAM,EAAkB,EAClB,EAAkB,MAAM,KAAK,EAAgB,CAC7CC,EAA4B,EAAE,CAWpC,OATA,EAAM,QAAQ,GAAQ,CAEpB,EAAgB,IAAI,EAAK,OAAO,EAChC,EAAgB,IAAI,EAAK,OAAO,EAEhC,EAAgB,KAAK,GAAG,EAAK,OAAO,GAAG,EAAK,SAAS,EAErD,CAEK,CACN,kBACA,kBACA,eAAgB,EAChB,CAGF,KAAK,UACJ,GACI,CACJ,IAAM,EAAU,EAAM,KAEtB,GAAI,EAAQ,OAAS,SAAU,CAC9B,IAAM,EAAgB,EAChB,EAAS,EACd,EAAc,MACd,EAAc,MACd,EAAc,WACd,EAAc,aACd,EAAc,cACd,CACD,KAAK,YAAY,EAAO,SACd,EAAQ,OAAS,YAAa,CAExC,IAAM,EAAgB,EADF,EACiC,MAAM,CAC3D,KAAK,YAAY,CAAE,gBAAe,CAAoB,SAC5C,EAAQ,OAAS,WAAY,CACvC,IAAM,EAAkB,EAClB,EAAgB,EACrB,EAAgB,MAChB,EAAgB,mBAChB,CACD,KAAK,YAAY,CAAE,gBAAe,CAAmB"}